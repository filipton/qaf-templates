const PAGES_DIR: &'static str = "src/pages";
const ROUTER_PATH: &'static str = "src/router.rs";

use anyhow::{anyhow, Result};
use rust_format::{Formatter, RustFmt};
use std::path::PathBuf;
use syn::{ItemFn, Lit, LitStr, Meta};

#[derive(Debug, Clone)]
struct PageEntry {
    name: String,
    is_dir: bool,
    children: Vec<PageEntry>,
}

#[derive(Debug, Clone)]
struct FunctionRoute {
    function: String,
    route: Option<String>,
}

fn main() -> Result<()> {
    let pages = PathBuf::from(PAGES_DIR);

    let entries: PageEntry = PageEntry::generate(pages.clone())?;
    let lib_str = entries.generate_mods()?;
    let routes_str = entries.generate_routes(&pages, 1);

    let routes = format!(
        r#"
        pub async fn router(req: Request, env: Env, ctx: Context) -> Result<Response> {{
            let path = req.url()?;
            let path = path.path();
            let path = path.split("/").collect::<Vec<&str>>();

            {}

            Ok(Response::ok("404 not found")?.with_status(404))
        }}
        "#,
        routes_str
    );

    let mut main_template_content = format!(
        r#"
            //THIS FILE IS AUTOGENERATED, DO NOT EDIT
            use worker::{{Context, Env, Request, Response, Result}};

            #[path = "pages"]
            {}

            {}
        "#,
        lib_str, routes
    );

    main_template_content = RustFmt::new().format_str(main_template_content)?;
    std::fs::write(ROUTER_PATH, main_template_content)?;

    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-changed=fnstack.json");
    println!("cargo:rerun-if-changed=src/pages");

    Ok(())
}

impl PageEntry {
    pub fn generate(dir: PathBuf) -> Result<PageEntry> {
        let mut children: Vec<PageEntry> = Vec::new();

        for entry in dir.read_dir()? {
            if let Ok(entry) = entry {
                let file_type = entry.file_type()?;

                if file_type.is_dir() {
                    children.push(PageEntry::generate(entry.path())?);
                } else if file_type.is_file() {
                    let file_name = entry
                        .file_name()
                        .to_str()
                        .unwrap()
                        .split('.')
                        .collect::<Vec<&str>>()[0]
                        .to_owned();

                    children.push(PageEntry {
                        name: file_name,
                        is_dir: entry.file_type()?.is_dir(),
                        children: vec![],
                    })
                }
            }
        }

        // WTF???
        let dir_name = dir.file_name().unwrap().to_str().unwrap().to_owned();
        children.sort_by_key(|k| k.is_dir);

        return Ok(PageEntry {
            name: dir_name,
            is_dir: true,
            children,
        });
    }

    pub fn generate_mods(&self) -> Result<String> {
        let mut out = String::new();
        if self.is_dir && self.children.len() == 0 {
            return Ok(out);
        }

        out += &format!("pub mod {}", self.name);
        if self.children.len() > 0 {
            out += "{ \n";

            for child in self.children.clone() {
                out += &child.generate_mods()?;
            }

            out += "} \n";
        } else {
            out += "; \n";
        }

        Ok(out)
    }

    pub fn generate_routes(&self, path: &PathBuf, depth: u32) -> String {
        let mut tmp = format!("let route = path.get({});\n", depth);

        for child in &self.children {
            let mut child_path = path.join(&child.name);
            if child.is_dir {
                tmp += &format!("if route == Some(&\"{}\") {{ \n", child.name);
                tmp += &child.generate_routes(&child_path, depth + 1);
                tmp += "\n}";
                continue;
            }

            child_path.set_extension("rs");
            let use_path = path
                .to_str()
                .unwrap()
                .replacen("src/", "", 1)
                .replace("/", "::");
            let use_path = format!("{}::{}", use_path, child.name);

            for route in PageEntry::get_cloudflare_routes(child_path).unwrap_or(vec![]) {
                tmp += &match route.route {
                    Some(route) => format!(
                        "if route == Some(&\"{}\") && path.len() == {} {{ \n",
                        route,
                        depth + 1
                    ),
                    None => format!("if route == None {{ \n"),
                };

                tmp += &format!(
                    "return {}::{}(req, env, ctx).await;\n",
                    use_path, route.function
                );

                //tmp += &child.generate_routes(&child_path, depth + 1);
                tmp += "\n}";
            }
        }

        return tmp;
    }

    /*
    pub fn ogenerate_routes(&self) -> String {
        let mut tmp = String::from("web::scope(\"\")");

        for child in &self.children {
            if child.children.len() > 0 {
                tmp += &*child.o_generate_routes(PathBuf::from("src/pages"), 1);
                continue;
            }

            let child_path = PathBuf::from(PAGES_DIR).join(format!("{}.rs", child.name));
            for route in PageEntry::get_cloudflare_routes(child_path).unwrap_or(vec![]) {
                tmp += &format!(".service(pages::{}::{})", child.name, route);
            }
        }

        return tmp;
    }

    fn o_generate_routes(&self, path: PathBuf, depth: u32) -> String {
        let mut tmp = String::new();
        let path = path.join(&self.name);

        for child in self.children.clone() {
            if child.children.len() > 0 {
                tmp += &child.o_generate_routes(path.clone(), depth + 1);
                continue;
            }

            let tmp_path = path.clone().join(format!("{}.rs", child.name));
            let use_path = path
                .to_str()
                .unwrap()
                .replacen("src/", "", 1)
                .replace("/", "::");

            for routes in PageEntry::get_cloudflare_routes(tmp_path).unwrap_or(vec![]) {
                tmp += &format!(".service({}::{}::{})\n", use_path, child.name, routes);
            }
        }

        return tmp;
    }
    */

    pub fn get_cloudflare_routes(path: PathBuf) -> Result<Vec<FunctionRoute>> {
        let file_content = std::fs::read_to_string(path)?;

        let syntax = syn::parse_file(&file_content).unwrap();
        let functions: Vec<FunctionRoute> = syntax
            .items
            .iter()
            .filter_map(|item| {
                if let syn::Item::Fn(item_fn) = item {
                    if let Ok(route) = PageEntry::is_cloudflare_attr(item_fn) {
                        let fn_route = FunctionRoute {
                            function: item_fn.sig.ident.to_string(),
                            route,
                        };

                        return Some(fn_route);
                    }
                }

                None
            })
            .collect();

        return Ok(functions);
    }

    const CF_MACROS: [&'static str; 1] = ["route"];
    fn is_cloudflare_attr(item: &ItemFn) -> Result<Option<String>> {
        for attr in item.attrs.clone() {
            for segment in attr.path().segments.clone() {
                let ident = segment.ident.to_string();
                if PageEntry::CF_MACROS.contains(&ident.as_str()) {
                    if let Ok(arg) = attr.parse_args::<LitStr>() {
                        return Ok(Some(arg.value()));
                    }

                    return Ok(None);
                }
            }
        }

        return Err(anyhow!(""));
    }
}
