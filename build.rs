const PAGES_DIR: &'static str = "src/pages";
const SCOPE_PATH: &'static str = "src/actix_scope.rs";

use anyhow::Result;
use config::BuildrsConfig;
use rust_format::{Formatter, RustFmt};
use std::path::PathBuf;
use syn::ItemFn;

mod config;

#[derive(Debug, Clone)]
struct PageEntry {
    name: String,
    is_dir: bool,
    children: Vec<PageEntry>,
}

fn main() -> Result<()> {
    let config: BuildrsConfig = BuildrsConfig::from_file(PathBuf::from("fnstack.json"))?;

    let pages = PathBuf::from(PAGES_DIR);

    let entries: PageEntry = PageEntry::generate(pages, &config)?;
    let lib_str = entries.generate_mods()?;
    let services_str = entries.generate_services();

    let services = format!(
        r#"
        pub fn generated_scope() -> actix_web::Scope {{
            {}
        }}
        "#,
        services_str
    );

    let mut main_template_content = format!(
        r#"
            //THIS FILE IS AUTOGENERATED, DO NOT EDIT
            use actix_web::web;
            
            #[path = "pages"]
            {}

            {}
        "#,
        lib_str, services
    );

    main_template_content = RustFmt::new().format_str(main_template_content)?;
    std::fs::write(SCOPE_PATH, main_template_content)?;

    println!("cargo:rerun-if-changed=build.rs");
    println!("cargo:rerun-if-changed=fnstack.json");
    println!("cargo:rerun-if-changed=src/pages");

    Ok(())
}

impl PageEntry {
    pub fn generate(dir: PathBuf, config: &BuildrsConfig) -> Result<PageEntry> {
        let mut children: Vec<PageEntry> = Vec::new();

        for entry in dir.read_dir()? {
            if let Ok(entry) = entry {
                let file_type = entry.file_type()?;

                if file_type.is_dir() {
                    children.push(PageEntry::generate(entry.path(), config)?);
                } else if file_type.is_file() {
                    let file_name = entry
                        .file_name()
                        .to_str()
                        .unwrap()
                        .split('.')
                        .collect::<Vec<&str>>()[0]
                        .to_owned();

                    children.push(PageEntry {
                        name: file_name,
                        is_dir: entry.file_type()?.is_dir(),
                        children: vec![],
                    })
                }
            }
        }

        // WTF???
        let dir_name = dir.file_name().unwrap().to_str().unwrap().to_owned();
        children.sort_by_key(|k| k.is_dir);

        return Ok(PageEntry {
            name: dir_name,
            is_dir: true,
            children,
        });
    }

    pub fn generate_mods(&self) -> Result<String> {
        let mut out = String::new();

        if self.is_dir && self.children.len() == 0 {
            return Ok(out);
        }

        out += &format!("pub mod {}", self.name);

        if self.children.len() > 0 {
            out += "{{ \n";

            for child in self.children.clone() {
                out += &child.generate_mods()?;
            }

            out += "}} \n";
        } else {
            out += "; \n";
        }

        Ok(out)
    }

    pub fn generate_services(&self) -> String {
        let mut tmp = String::from("web::scope(\"\")");

        for child in &self.children {
            if child.children.len() > 0 {
                tmp += &*child._generate_services(PathBuf::from("src/pages"), "pages::");
                continue;
            }

            let mut path = PathBuf::from(PAGES_DIR);
            path.push(format!("{}.rs", child.name));

            for endpoint in PageEntry::get_actix_endpoints(path).unwrap_or(vec![]) {
                tmp += &format!(".service(pages::{}::{})", child.name, endpoint);
            }
        }

        return tmp;
    }

    fn _generate_services(&self, path: PathBuf, use_path: &str) -> String {
        let mut tmp = String::new();

        let use_path = format!("{}{}::", use_path, self.name);

        let mut path = path;
        path.push(&self.name);

        tmp += &format!(".service(web::scope(\"{}\")\n", self.name);

        for child in self.children.clone() {
            if child.children.len() > 0 {
                tmp += &child._generate_services(path.clone(), &use_path);
                continue;
            }

            let mut tmp_path = path.clone();
            tmp_path.push(format!("{}.rs", child.name));
            let tmp_use_path = format!("{}{}::", use_path, child.name);

            for endpoint in PageEntry::get_actix_endpoints(tmp_path).unwrap_or(vec![]) {
                tmp += &format!(".service({}{})\n", tmp_use_path, endpoint);
            }
        }

        tmp += ")";
        return tmp;
    }

    pub fn get_actix_endpoints(path: PathBuf) -> Result<Vec<String>, std::io::Error> {
        let file_content = std::fs::read_to_string(path)?;

        let syntax = syn::parse_file(&file_content).unwrap();
        let functions: Vec<String> = syntax
            .items
            .iter()
            .filter_map(|item| {
                if let syn::Item::Fn(item_fn) = item {
                    if PageEntry::is_actix_attr(item_fn) {
                        return Some(item_fn.sig.ident.to_string());
                    }
                }

                None
            })
            .collect();

        return Ok(functions);
    }

    const ACTIX_MACROS: [&'static str; 7] =
        ["get", "post", "put", "delete", "head", "options", "patch"];

    fn is_actix_attr(item: &ItemFn) -> bool {
        for attr in item.attrs.clone() {
            for segment in attr.path.segments {
                let ident = segment.ident.to_string();
                if PageEntry::ACTIX_MACROS.contains(&ident.as_str()) {
                    return true;
                }
            }
        }

        return false;
    }
}
